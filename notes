----- HTML to include for filtering tags
<!--Radio inputs to select filter - not shown!-->
<input type="radio" id="featured-radio" class="radio-button" name="content-filter" checked="checked">
<input type="radio" id="personal-radio" class="radio-button" name="content-filter">
<input type="radio" id="tech-radio" class="radio-button" name="content-filter">

<!--Filter buttons-->
<div id="blog-filter">
	<label for="featured-radio" class="filter-label featured">Featured</label>
	<label for="personal-radio" class="filter-label personal">Personal</label>
	<label for="tech-radio" class="filter-label tech">Tech</label>
</div>


----- CSS to include for filtering tags
.radio-button {
    display: none;
}

#blog-filter {
    padding: 5% 0;
    display: flex;
    justify-content: center;
	color: white;
}

.filter-label {
	background-color: #262626;
    padding: 10px 20px;
    font-size: 1.4em;
    text-align: center;
    cursor: pointer;
	flex-grow: 1;
}

.filter-label:hover {
	text-decoration: underline;
}

#featured-radio:checked~#blog-filter .featured,
#personal-radio:checked~#blog-filter .personal,
#tech-radio:checked~#blog-filter .tech {
    background-color: white;
	color: #262626;
	border: 2px solid #262626;
	
}

#tech-radio:checked~main .tech,
#featured-radio:checked~main .featured,
#personal-radio:checked~main .personal {
    display: block;
}



Need to store all of the articles into a buffer array that will then be used to write to an appropriate file
		TODO		1. Create template files to be used as string sources where blog previews from each category are inserted
		TODO		2. During template copy->write process, make sure anchor class for current directory is changed depending on the category
		TODO		3. Read template file into string buffer
		CURRENT		4. Extract blog preview from sources into string buffer (2D buffer array?)
		NEXT		5. Inject anchor element to link to permalink blog article using header text as link trigger
		TODO		5. Order blog previews based on post date (included in buffer array?)
		TODO		6. Export ordered blog previews into new single buffer array
		TODO		7. Insert ordered blog previews single buffer array into appropriate place in template file string buffer
		TODO		8. Write full page string buffer into appropriate file


files.forEach( function CheckBlog(entry, ind) {
				console.log(entry);
				// Local save of the full file directory
				var filePath = pth.join( fileCat, entry );
				fs.stat( filePath, function TestFile(err, fileStats) {
					// If there was an error in testing the file
					if( err ) { console.log( err.message ); } else {
						// Check that the file found is actually a directory
						if( fileStats.isDirectory() ) {
							// Local save of the full file name
							var fileName = pth.join( filePath, 'index.html' );
							// Attempt to read the file
							fs.readFile( fileName, 'utf8', function GetPreviewSource( err, contents ) {
								// Check that no error was made in reading the file
								if( err ) { console.log( err.message ); } else {
									// Call to write the articles for that file
									blogPreviews[fileName] = sg.GetBlogPreview( fileName, contents, categories[cat] );
								}
							})
						}
					}
				}); 
			});
